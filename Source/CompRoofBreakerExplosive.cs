using System.Collections.Generic;
using RimWorld;
using Verse;
using Verse.Sound;

namespace RemoteExplosives {
	// A mining explosive that is able to break thick mountain roof
	public class CompRoofBreakerExplosive : CompMiningExplosive {
		private const int RoofFilthAmount = 3;
		private readonly IntRange CollapseDelay = new IntRange(0, 120);

		private static readonly HashSet<IntVec3> reservedRoofTiles = new HashSet<IntVec3>();

		public override void PostSpawnSetup() {
			reservedRoofTiles.Clear(); // just a precaution agains leaks
		}

		protected override void Detonate() {
			base.Detonate();
			var explosiveProps = props as CompProperties_Explosive;
			if(explosiveProps == null) return;
			var canAffectThickRoof = RemoteExplosivesUtility.IsEffectiveRoofBreakerPlacement(explosiveProps.explosiveRadius, parent.Position);
			foreach (var cell in GenRadial.RadialCellsAround(parent.Position, explosiveProps.explosiveRadius, true)) {
				if(!cell.InBounds()) continue;
				var roof = Find.RoofGrid.RoofAt(cell);
				if(roof == null || (roof.isThickRoof && !canAffectThickRoof)) continue;
				if (roof.filthLeaving != null) {
					for (int j = 0; j < RoofFilthAmount; j++) {
						FilthMaker.MakeFilth(cell, roof.filthLeaving);
					}
				}
				if (!roof.isThickRoof) {
					// do not break roofs over already collapsing tiles
					if(!reservedRoofTiles.Contains(cell)) Find.RoofGrid.SetRoof(cell, null);
				} else {
					reservedRoofTiles.Add(cell);
					Find.RoofGrid.SetRoof(cell, RoofDefOf.RoofRockThin); // downgrade roof, so that charges can be chained
					var roofCell = cell;
					CallbackScheduler.Instance.ScheduleCallback(() => { // delay collapse for more interesting visual effect
						reservedRoofTiles.Remove(roofCell);
						Find.RoofGrid.SetRoof(roofCell, roof); // plug thick roof back in so it can collapse
						RoofCollapserImmediate.DropRoofInCells(roofCell);
						Find.RoofGrid.SetRoof(roofCell, RoofDefOf.RoofRockThin); // place thin roof over collapsed rock to prevent roof build areas to be auto-generated by AutoBuildRoofZoneSetter
						Find.AreaNoRoof.Set(roofCell);
						CaveInSoundEffect.PlayOneShot(roofCell);
					}, CollapseDelay.RandomInRange);
				}
			}
		}
	}
}